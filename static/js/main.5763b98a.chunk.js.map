{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","valuesSortType","Object","values","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","isResetVisible","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAQKA,E,0EAHCC,EAAsB,WACtBC,EAAoB,U,SAErBF,K,sBAAAA,E,gBAAAA,E,YAAAA,E,qBAAAA,E,cAAAA,E,cAAAA,E,YAAAA,E,cAAAA,E,UAAAA,E,iBAAAA,M,KA0CE,IAAMG,EAAgB,WAC3B,IAAMC,EAAiBC,OAAOC,OAAON,GACrC,EAAkCO,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAjCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKP,EACH,OAAOe,EAAME,cAAcD,GAE7B,KAAKf,EACH,OAAOc,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,GACFI,EAAcM,UAGTN,EAOcO,CAAiBjB,EAAgBI,EAAWE,GAC3DY,EAAiBd,GAAaE,EAMpC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMhB,EAAaR,IAC5BsB,UAAWG,IACT,CAAE,WAAYlB,IAAcP,GAC5B,kBALJ,iCAWA,wBACEuB,KAAK,SACLC,QAAS,kBAAMhB,EAAaP,IAC5BqB,UAAWG,IACT,CAAE,WAAYlB,IAAcN,GAC5B,qBALJ,4BAWA,wBACEsB,KAAK,SACLC,QAAS,kBAAMd,GAAeD,IAC9Ba,UAAWG,IACT,CAAE,YAAahB,GACf,qBALJ,qBAWEY,GACA,wBACEE,KAAK,SACLC,QA5CU,WAClBhB,EAAa,IACbE,GAAc,IA2CNY,UAAU,4BAHZ,sBAUJ,6BACGX,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC3GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5763b98a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nenum SortType {\n  Dumplings = 'Dumplings',\n  Carrot = 'Carrot',\n  Eggs = 'Eggs',\n  IceCream = 'Ice cream',\n  Apple = 'Apple',\n  Bread = 'Bread',\n  Fish = 'Fish',\n  Honey = 'Honey',\n  Jam = 'Jam',\n  Garlic = 'Garlic',\n}\n\nfunction getPreparedGoods(\n  goods: SortType[],\n  sortField: string,\n  isReversed: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const valuesSortType = Object.values(SortType);\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(valuesSortType, sortField, isReversed);\n  const isResetVisible = sortField || isReversed;\n  const handleReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n          className={cn(\n            { 'is-light': sortField !== SORT_FIELD_ALPHABET },\n            'button is-info',\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          className={cn(\n            { 'is-light': sortField !== SORT_FIELD_LENGTH },\n            'button is-success',\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(!isReversed)}\n          className={cn(\n            { 'is-light': !isReversed },\n            'button is-warning',\n          )}\n        >\n          Reverse\n        </button>\n\n        {(isResetVisible) && (\n          <button\n            type=\"button\"\n            onClick={handleReset}\n            className=\"is-light button is-danger\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}